# Telegraf Configuration

[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = ""

# Output Plugin
[[outputs.postgresql]]
  connection = "host=postgres user=telegraf password=telegraf sslmode=disable"

# Input Plugins
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.temp]]

[[inputs.mem]]

[[inputs.disk]]

[[inputs.net]]
  interfaces = ["eth0", "wlan0"]

# [[inputs.docker]]
#   endpoint = "unix:///var/run/docker.sock"

#   ## Containers to include and exclude. Collect all if empty. Globs accepted.
#   container_name_include = []
#   container_name_exclude = []

#   storage_objects = []

#   ## Timeout for docker list, info, and stats commands
#   timeout = "5s"

#   perdevice = false

#   total = true

#   total_include = ["cpu", "blkio", "network"]

#   ## docker labels to include and exclude as tags.  Globs accepted.
#   docker_label_include = []
#   docker_label_exclude = []

# [[inputs.exec]]
#   commands = ["cat /hostfs/var/log/smart_health.log"]
#   timeout = "5s"
#   data_format = "grok"
#   grok_patterns = ["%{GREEDYDATA:output}"]
#   name_suffix = "_smart_health"

# [[inputs.exec]]
#   commands = ["cat /hostfs/var/log/smart_selftest.log"]
#   timeout = "5s"
#   data_format = "grok"
#   grok_patterns = ["%{GREEDYDATA:output}"]
#   name_suffix = "_smart_selftest"

#  [[inputs.file]]
#     urls = []
#     data_format = "json_v2"

#     [[inputs.file.json_v2]]
#       measurement_name = "tidning" # A string that will become the new measurement name
#       measurement_name_path = "" # A string with valid GJSON path syntax, will override measurement_name
#       timestamp_path = "" # A string with valid GJSON path syntax to a valid timestamp (single value)
#       timestamp_format = "" # A string with a valid timestamp format (see below for possible values)
#       timestamp_timezone = "" # A string with with a valid timezone (see below for possible values)

#       [[inputs.file.json_v2.field]]
#         path = "" # A string with valid GJSON path syntax
#         rename = "new name" # A string with a new name for the tag key
#         type = "int" # A string specifying the type (int,uint,float,string,bool)
#         optional = false # true: suppress errors if configured path does not exist

#       [[inputs.file.json_v2.tag]]
#         path = "" # A string with valid GJSON path syntax
#         rename = "new name" # A string with a new name for the tag key
#         type = "float" # A string specifying the type (int,uint,float,string,bool)
#         optional = false # true: suppress errors if configured path does not exist

#       [[inputs.file.json_v2.object]]
#         path = "" # A string with valid GJSON path syntax
#         timestamp_key = "" # A JSON key (for a nested key, prepend the parent keys with underscores) to a valid timestamp
#         timestamp_format = "" # A string with a valid timestamp format (see below for possible values)
#         timestamp_timezone = "" # A string with with a valid timezone (see below for possible values)
#         disable_prepend_keys = false (or true, just not both)
#         included_keys = [] # List of JSON keys (for a nested key, prepend the parent keys with underscores) that should be only included in result
#         excluded_keys = [] # List of JSON keys (for a nested key, prepend the parent keys with underscores) that shouldn't be included in result
#         tags = [] # List of JSON keys (for a nested key, prepend the parent keys with underscores) to be a tag instead of a field
#         optional = false # true: suppress errors if configured path does not exist
#         [inputs.file.json_v2.object.renames] # A map of JSON keys (for a nested key, prepend the parent keys with underscores) with a new name for the tag key
#           key = "new name"
#         [inputs.file.json_v2.object.fields] # A map of JSON keys (for a nested key, prepend the parent keys with underscores) with a type (int,uint,float,string,bool)
#           key = "int"
